## ---------------------------------------------------------------------
## Put licence text here
## ---------------------------------------------------------------------

## DO NOT EDIT
## This file is automatically generated from a file in the repository "linalgwrap".
## Edit the original and call the script "update_from_sister_repos.sh" instead.

# Finds and sets up krims under the target names stored in
#      krims_DEBUG_TARGET     (Debug version)
#      krims_RELEASE_TARGET   (Release version)
# such that just linking against it as a dependency does everything
# automatically.
#
# In case the krims library is not found and AUTOCHECKOUT_MISSING_LIBS is set to
# on, krims is automatically checked out and built.
# Otherwise a fatal error is produced.
#

#
# Options and properties required
#
option(AUTOCHECKOUT_MISSING_REPOS "Automatically checkout missing repositories" OFF)

#
# -------
#

if (TARGET "${krims_DEBUG_TARGET}"  OR TARGET "${krims_RELEASE_TARGET}")
	message(STATUS "Found krims targets, assume krims already configured for build.")
	return()
endif()

# Try to find krims somewhere
find_package(krims ${KRIMS_VERSION} QUIET CONFIG)
string(TOUPPER "${PROJECT_NAME}" PROJECT_UPPER)
if ("${krims_DIR}" STREQUAL "krims_DIR-NOTFOUND")
	if (AUTOCHECKOUT_MISSING_REPOS)
		execute_process(
			COMMAND "sh" "get_krims.sh"
			WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/external"
			RESULT_VARIABLE RES
		)
		if (NOT RES EQUAL 0)
			message(FATAL_ERROR "Getting krims from git failed with error: ${RES}")
		endif()

		#
		# Proceed to configure krims
		#
		add_subdirectory(${PROJECT_SOURCE_DIR}/external/krims)
		include_directories(${PROJECT_SOURCE_DIR}/external/krims/src)

		# TODO check version of krims!

		return()
	endif()

	message(FATAL_ERROR "Could not find krims library.
Either provide the installation prefix of the krims library in the environment \
variable krims_DIR or enable autocheckout via -DAUTOCHECKOUT_MISSING_REPOS=ON.")
endif()

message(WARNING "This part of findKrims has never been tested.")

# Setup library targets
set(krims_DEBUG_TARGET   "Upstream::krims.g"
	CACHE INTERNAL "Target name of debug version of krims")
set(krims_RELEASE_TARGET "Upstream::krims"
	CACHE INTERNAL "Target name of release version of krims")

# Check that all required targets are available.
foreach(build ${DRB_BUILD_TYPES})
	if(NOT TARGET "${krims_${build}_TARGET}")
		message(FATAL_ERROR "We could not find a ${build} version of krims at this location. \
		Either disable building a ${build} version of ${CMAKE_PROJECT_NAME} or else \
		rebuild krims with a ${build} version as well.")
	endif()
endforeach()

#TODO check that we don't need extra stuff like in findLinalgwrap in gscf

message(STATUS "Found krims config at ${krims_CONFIG}")
